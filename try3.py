from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import os
import time
import subprocess

# Carpeta donde se guardarán los subtítulos
OUTPUT_FOLDER = "C:\\Users\\USER\\Videos\\descargarSubtitlos"

def generate_cookies_str(driver):
    """Genera las cookies en formato Netscape compatible con yt-dlp directamente en una cadena."""
    cookies = driver.get_cookies()
    cookie_str = "# Netscape HTTP Cookie File\n"
    cookie_str += "# This file is generated by Selenium. Do not edit.\n\n"
    for cookie in cookies:
        cookie_str += (
            f"{cookie['domain']}\t"
            f"{'TRUE' if cookie['domain'].startswith('.') else 'FALSE'}\t"
            f"{cookie['path']}\t"
            f"{'TRUE' if cookie.get('secure', False) else 'FALSE'}\t"
            f"{cookie.get('expiry', 0)}\t"
            f"{cookie['name']}\t"
            f"{cookie['value']}\n"
        )
    return cookie_str

def download_subtitles():
    # Pedir al usuario la URL del video
    video_url = input("Ingrese la URL del video: ").strip()

    # Configuración del navegador en modo headless
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # No abrir ventana del navegador
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--log-level=3")  # Suprimir mensajes de log innecesarios
    options.add_argument("--mute-audio")  # Silenciar cualquier audio

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    try:
        # URL de inicio de sesión
        login_url = "https://uc.osinergmin.gob.pe/login/index.php"

        print("[INFO] Iniciando sesión de forma silenciosa...")
        driver.get(login_url)

        # Completar campos de usuario y contraseña
        username_field = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        username_field.send_keys("76075474")  # Reemplaza con tu usuario

        password_field = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.NAME, "password"))
        )
        password_field.send_keys("perralacy28")  # Reemplaza con tu contraseña
        password_field.send_keys("\n")  # Enviar el formulario
        time.sleep(5)

        print("[INFO] Inicio de sesión completado.")

        # Navegar a la página del video
        print("[INFO] Accediendo al video de forma silenciosa...")
        driver.get(video_url)
        time.sleep(5)

        iframes = driver.find_elements(By.TAG_NAME, "iframe")
        print(f"[INFO] Se encontraron {len(iframes)} iframe(s) en la página.")

        iframe_urls = [iframe.get_attribute("src") for iframe in iframes]
        vimeo_iframe = next((url for url in iframe_urls if "vimeo.com" in url), None)

        if not vimeo_iframe:
            raise ValueError("Iframe de Vimeo no encontrado.")

        print(f"[INFO] Iframe de Vimeo seleccionado: {vimeo_iframe}")

        # Generar las cookies en formato Netscape
        cookies_str = generate_cookies_str(driver)

        print("[INFO] Descarga de subtítulos en progreso...")

        # Asegurar que la carpeta de salida exista
        os.makedirs(OUTPUT_FOLDER, exist_ok=True)

        # Construcción del comando yt-dlp
        yt_dlp_cmd = [
            "yt-dlp",
            "--cookies", "-",  # Usar las cookies desde stdin
            "--referer", video_url,
            "--write-sub",  # Descargar subtítulos
            "--all-subs",  # Descargar todos los subtítulos disponibles
            "--sub-lang", "es,en",  # Priorizar subtítulos en español e inglés
            "--skip-download",  # No descargar video
            "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",  # Evitar bloqueo de Vimeo
            "-o", os.path.join(OUTPUT_FOLDER, "%(title)s.%(ext)s"),
            "--hls-prefer-native",
            vimeo_iframe
        ]

        # Ejecutar yt-dlp sin mostrar ventana de consola en Windows
        process = subprocess.Popen(
            yt_dlp_cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            creationflags=subprocess.CREATE_NO_WINDOW  # Oculta la ventana de la consola en Windows
        )

        # Enviar las cookies a través de stdin
        stdout, stderr = process.communicate(input=cookies_str)

        # Mostrar salida solo si hay errores
        if stderr.strip():
            print("[ERROR] yt-dlp:", stderr.strip())

        print("[INFO] Descarga de subtítulos completada.")

    except Exception as e:
        print(f"[ERROR] Ocurrió un error: {e}")
    finally:
        driver.quit()  # Cerrar el navegador de fondo

if __name__ == "__main__":
    download_subtitles()
